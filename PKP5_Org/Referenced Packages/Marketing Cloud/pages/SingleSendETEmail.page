<apex:page controller="et4ae5.phoenixSendControl" tabStyle="et4ae5__SendDefinition__c" action="{!initialize}">
    <apex:composition template="et4ae5__SendTemplate">
        <apex:define name="customCSS">
            <style>
                .bPageBlock .pbHeader {
                    background-color: white;
                }
                .alert>p+p {
                    margin-top: 5px;
                }
                .alert-dismissable .close {
                    top: -2px;
                    right: -21px;
                }
            </style>
        </apex:define>
        <apex:define name="sendTypeImage">
            <img height="45" src="{!URLFOR( $Resource.ExactTargetImages, 'email.png' )}" />
        </apex:define>
        <apex:define name="buManagementImage">
            <img height="45" src="{!URLFOR( $Resource.ExactTargetImages, 'bumgmtemail.png' )}" />
        </apex:define>
        <apex:define name="sendTypeLabel">
            {!$Label.etEmSend}
        </apex:define>
    </apex:composition>
    <apex:form styleClass="fieldForm">
        <apex:outputPanel id="pageMessages">
            <c:pageMessages closableErrors="true" />
        </apex:outputPanel>
        <apex:actionFunction name="selectEmailJS" action="{!selectEmail}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,recipientReportWrapper,sendEmailForm,sendButton" status="listEmailsStatus">
            <apex:param name="emailId" value="" />
            <apex:param name="emailName" value="" />
            <apex:param name="emailSubject" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="selectReportJS" action="{!selectReport}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,recipientReportWrapper,sendEmailForm" status="listRecipientReportsStatus">
            <apex:param name="ReportId" value="" />
            <apex:param name="ReportName" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="getFolderInfo" action="{!expandFolder}" rerender="pageMessages,emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,recipientReportWrapper" status="listEmailsStatus">
            <apex:param name="folderId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="openReportFolder" action="{!expandReportFolder}" rerender="pageMessages,emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,recipientReportWrapper" status="listRecipientReportsStatus">
            <apex:param name="reportFolderId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="toggleSort" action="{!toggleSort}" rerender="results">
            <apex:param name="tsSortField" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="openExclusionReportFolder" action="{!expandExclusionReportFolder}" rerender="pageMessages,emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,exclusionReportWrapper" status="listExclusionReportsStatus">
            <apex:param name="exclusionReportFolderId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="openSubscriberListFolder" action="{!expandSubscriberListFolder}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,subscriberListWrapper" status="listSubscriberListsStatus">
            <apex:param name="subscriberListFolderId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="inclusionAdd" action="{!inclusionAdd}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,subscriberListWrapper,inclusionCampaignsZ,recipientReportsZ" status="recipPicklistStatus" />
        <apex:actionFunction name="inclusionRemove" action="{!removeCampaignList}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,subscriberListWrapper,inclusionCampaignsZ,recipSourcePicklists">
            <apex:param name="removeCampaignListId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="exclusionAdd" action="{!exclusionAdd}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,subscriberListWrapper,inclusionCampaignsZ,recipientReportsZ" />
        <apex:actionFunction name="exclusionRemove" action="{!removeExcluCampaignList}" rerender="emailName,emailSubject,exactTargetEmails,emailPreviewLinkWrapper,subscriberListWrapper,inclusionCampaignsZ,recipSourcePicklists">
            <apex:param name="removeCampaignListId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="selectLuBu" action="{!selectLuBu}" onComplete="hidepopup();" rerender="exactTargetEmails,pageMessages,sendEmailForm,fromBlock,recipientReports,recipientReportsZ,exclusionReports,exclusionReportsZ" status="wholePageBlock">
            <apex:param name="luBuId" value="" />
        </apex:actionFunction>
        <apex:actionFunction name="checkSendEmailReadiness" action="{!sendEnabler}" rerender="sendbutton" />
        <apex:actionFunction name="isSSon" action="{!isSSon}" rerender="sendbutton" />
        <apex:actionFunction name="isSSoff" action="{!isSSoff}" rerender="sendbutton" />
        <apex:actionFunction name="createBuFilter" action="{!createBuFilter}" oncomplete="showpopup();" status="wholePageBlock" rerender="popupOP,bottomBlock,exactTargetEmails,pageMessages,sendEmailForm,fromBlock,recipientReports,recipientReportsZ,exclusionReports,exclusionReportsZ"
        />
        <apex:actionFunction name="refreshPopup" action="{!voidReturn}" rerender="popupOP,opaqueOP" />
        <apex:stylesheet value="{!$Resource.et4ae5__ExactTargetStyles}" />
        <div align="right">
            <apex:outputpanel >
        		<apex:outputLink target="_blank" style="text-decoration:none;color:#015ba7;" value="{!etLink}sessurl={!$Api.Partner_Server_URL_140}&sessid={!$Api.Session_ID}" onMouseOver="this.style.textDecoration='underline'" onMouseOut="this.style.textDecoration='none'">
          			{!$Label.goToEt}
        		</apex:outputLink>
                <apex:outputText rendered="{!hasMobile}" value="{!pipe}" />
                <apex:commandLink rendered="{!hasMobile}" style="text-decoration:none;color:#015ba7;" value="{!$Label.mobileSend}" onMouseOver="this.style.textDecoration='underline'" onMouseOut="this.style.textDecoration='none'" action="{!goToMobile}" />
                <apex:outputText value="{!pipe}" rendered="{!hasTriggered}"/>
                <apex:commandLink style="text-decoration:none;color:#015ba7;" value="{!$Label.sendAtmtn}" onMouseOver="this.style.textDecoration='underline'" onMouseOut="this.style.textDecoration='none'"
        		action="{!goToTriggeredSends}" rendered="{!hasTriggered}"/>    
                <apex:outputText rendered="{!isAdmin}" value="{!isAdminPipe}" />
                <apex:commandLink rendered="{!isAdmin}" style="text-decoration:none;color:#015ba7;" value="{!$Label.configInt}" onMouseOver="this.style.textDecoration='underline'" onMouseOut="this.style.textDecoration='none'" action="{!goToSettings}" />&nbsp;&nbsp;&nbsp;
            </apex:outputpanel>
        </div>
        <br />
        <apex:actionStatus id="wholePageBlock">
            <apex:facet name="start">
                <img class="spinnerLarge" src="{!URLFOR( $Resource.ExactTargetImages, 'spinEMAIL.GIF' )}" />
            </apex:facet>
            <apex:facet name="stop">
                <apex:pageBlock mode="view">
                    <div align="right">
                        <img style="vertical-align:middle;" height="18px" src="{!URLFOR( $Resource.ExactTargetImages, 'reqEmail.png' )}" />
                        <b> 
                            = {!$label.reqdInfo} 
                        </b>
                    </div>
                    <apex:pageBlockSection id="sendEmailForm" columns="1">
                        <apex:pageBlockSectionItem rendered="{!renderContact}" helptext="{!$Label.msg0062}">
                            <apex:outputLabel value="{!$Label.contact}" />
                            <apex:outputLabel value="{!ContactName}" />
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!renderLead}" helptext="{!$Label.msg0062}">
                            <apex:outputLabel value="{!$Label.lead}" />
                            <apex:outputLabel value="{!LeadName}" />
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!renderCampaign}" helptext="{!$Label.msg0061}">
                            <apex:outputLabel value="{!$Label.campaign}" />
                            <apex:outputLabel value="{!CampaignName}" />
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!renderBULookup}" helpText="{!$Label.msg0014}">
                            <apex:outputLabel value="{!$Label.busUnit}" />
                            <apex:outputPanel >
                                <table>
                                    <tr>
                                        <td>
                                            <apex:outputText value="{!selectedBuDisp}" />
                                        </td>
                                        <td>
                                            <input type="image" onclick="javascript:createBuFilter();return false;" src="/s.gif" id="showPopBtn" />
                                        </td>
                                        <td>
                                            <img style="vertical-align:middle;" height="18px" src="{!URLFOR( $Resource.ExactTargetImages, 'reqEmail.png' )}" />
                                        </td>
                                    </tr>
                                </table>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>

                        <!-- Email -->
                        <apex:pageBlockSectionItem id="emailTemplate" helpText="{!$Label.emailHelp}">
                            <apex:outputLabel for="emailName" value="{!$Label.email}" />
                            <apex:outputPanel id="emailWrapper" layout="block">
                                <apex:outputText id="emailName" value="{!localSend.email.name}" />
                                <apex:outputPanel id="emailPreviewLinkWrapper">
                                    <apex:outputPanel id="emailPreviewLink" rendered="{!IF( NOT( ISNULL( localSend.email ) ), true, false )}">
                                        <apex:actionStatus id="previewEmailStatus">
                                            <apex:facet name="start">
                                                <img class="spinnerLarge" src="{!URLFOR( $Resource.ExactTargetImages, 'spinEMAIL.GIF' )}" />
                                            </apex:facet>
                                            <apex:facet name="stop">
                                                <apex:outputpanel >
                                                    <apex:commandLink value="{!$Label.previewEm}" action="{!setImageString}" rerender="sendEmailForm,pageMessages" style="padding: 0 10px 0 10px;" status="previewEmailStatus" />
                                                    <apex:outputLink target="_blank" style="padding-right:10px;" value="{!etLink}sessurl={!$Api.Partner_Server_URL_140}&sessid={!$Api.Session_ID}&entityType=Email&displaynavi=false&entityid={!selectedEmail}">
          				  								{!$Label.editEml}
        				  							</apex:outputLink>
                                                    <!-- <a href="javascript:subscriberPreview.showDialog();" style="padding: 0 10px 0 10px;">
                                                        {!$Label.dynaPrev}
                                                    </a> -->
                                                </apex:outputpanel>
                                            </apex:facet>
                                        </apex:actionStatus>
                                    </apex:outputPanel>
                                </apex:outputPanel>
                                <apex:outputPanel >
                                    <apex:actionStatus id="listEmailsStatus">
                                        <apex:facet name="start">
                                            <img class="spinnerLarge" src="{!URLFOR( $Resource.ExactTargetImages, 'spinEMAIL.GIF' )}" />
                                        </apex:facet>
                                        <apex:facet name="stop">
                                            <apex:commandButton id="listEmails" value="{!$Label.find}" action="{!listExactTargetEmails}" rerender="exactTargetEmails,pageMessages,sendEmailForm" status="listEmailsStatus" />
                                        </apex:facet>
                                    </apex:actionStatus>
                                    <apex:outputText value="{!pipe}"/>
                  					<apex:outputLink target="_blank" style="padding-right:10px;" value="{!etLink}sessurl={!$Api.Partner_Server_URL_140}&sessid={!$Api.Session_ID}&entityType=Email&displaynavi=false&entityid=&entityAction=Create">
          	      						{!$Label.new}
        		  					</apex:outputLink>
                                    <img style="vertical-align:middle;" height="18px" src="{!URLFOR( $Resource.ExactTargetImages, 'reqEmail.png' )}" />
                                    <apex:outputPanel id="exactTargetEmails" layout="block">
                                        <apex:actionStatus id="clickEmailStatus">
                                            <apex:facet name="start">
                                                <img class="spinnerLarge" src="{!URLFOR( $Resource.ExactTargetImages, 'spinEMAIL.GIF' )}" />
                                            </apex:facet>
                                            <apex:facet name="stop">
                                                <apex:outputPanel styleClass="popup" layout="block" rendered="{!ShowEmailChooser }">
                                                    <script type="text/javascript">
                                                        function toggleFolderDisplay(folderId)
                                                        {
                                                            // Identify folder div.
                                                            var folderDiv = document.getElementById(folderId);
                                                            // Pull the folder class.
                                                            var folderClass = folderDiv.className;
                                                            // Determine if the folder is open or closed.
                                                            var newFolderClass = 'emailFolder closed';
                                                            if (folderClass.indexOf('closed') > -1)
                                                            {
                                                                newFolderClass = 'emailFolder open';
                                                            }
                                                            // Assing new class.
                                                            folderDiv.className = newFolderClass;
                                                        }
                                                    </script>
                                                    <apex:pageBlock >
                                                        <apex:pageBlockButtons location="both">
                                                            <apex:commandButton action="{!selectEmailCancel}" value="{!$Label.cancel}" rerender="exactTargetEmails" status="clickEmailStatus" />
                                                        </apex:pageBlockButtons>
                                                        <apex:repeat value="{!localSend.emails}" var="emailFolder1">
                                                            +
                                                            <a href="#" onclick="javascript:getFolderInfo('{!emailFolder1.Id}'); javascript:toggleFolderDisplay( 'emailFolder_{!emailFolder1.Id}' )">
                                                                <b> 
                                                                    {!emailFolder1.name} 
                                                                </b> 
                                                            </a>
                                                            <br />
                                                            <div class="emailFolder closed" id="emailFolder_{!emailFolder1.Id}">
                                                                <apex:repeat value="{!emailFolder1.subfolders}" var="emailFolder2" rendered="{!NOT( ISBLANK( emailFolder1.subfolders ) )}">
                                                                    +
                                                                    <a href="#" onclick="javascript:getFolderInfo('{!emailFolder2.Id}'); javascript:toggleFolderDisplay( 'emailFolder_{!emailFolder2.Id}' )">
                                                                        <b> 
                                                                            {!emailFolder2.name} 
                                                                        </b> 
                                                                    </a>
                                                                    <br />
                                                                    <div class="emailFolder closed" id="emailFolder_{!emailFolder2.Id}">
                                                                        <apex:repeat value="{!emailFolder2.subfolders}" var="emailFolder3" rendered="{!NOT( ISBLANK( emailFolder2.subfolders ) )}">
                                                                            +
                                                                            <a href="#" onclick="javascript:getFolderInfo('{!emailFolder3.Id}'); javascript:toggleFolderDisplay( 'emailFolder_{!emailFolder3.Id}' )">
                                                                                <b> 
                                                                                    {!emailFolder3.name} 
                                                                                </b> 
                                                                            </a>
                                                                            <br />
                                                                            <div class="emailFolder closed" id="emailFolder_{!emailFolder3.Id}">
                                                                                <apex:repeat value="{!emailFolder3.subfolders}" var="emailFolder4" rendered="{!NOT( ISBLANK( emailFolder3.subfolders ) )}">
                                                                                    +
                                                                                    <a href="#" onclick="javascript:getFolderInfo('{!emailFolder4.Id}'); javascript:toggleFolderDisplay( 'emailFolder_{!emailFolder4.Id}' )">
                                                                                        <b> 
                                                                                            {!emailFolder4.name} 
                                                                                        </b> 
                                                                                    </a>
                                                                                    <br />
                                                                                    <div class="emailFolder closed" id="emailFolder_{!emailFolder4.Id}">
                                                                                        <apex:repeat value="{!emailFolder4.subfolders}" var="emailFolder5" rendered="{!NOT( ISBLANK( emailFolder4.subfolders ) )}">
                                                                                            +
                                                                                            <a href="#" onclick="javascript:getFolderInfo('{!emailFolder5.Id}'); javascript:toggleFolderDisplay( 'emailFolder_{!emailFolder5.Id}' )">
                                                                                                <b> 
                                                                                                    {!emailFolder5.name} 
                                                                                                </b> 
                                                                                            </a>
                                                                                            <br />
                                                                                            <div class="emailFolder closed" id="emailFolder_{!emailFolder5.Id}">
                                                                                                <apex:repeat value="{!emailFolder5.emails}" var="email5">
                                                                                                    &nbsp;-&nbsp;
                                                                                                    <a href="#" onclick="javascript:selectEmailJS( '{!email5.id}', '{!email5.encName}', '{!email5.encTitle}' );subscriberPreview.setEmailId('{!email5.id}');" status="sendButtonStatus"> 
                                                                                                        {!email5.name} 
                                                                                                    </a>
                                                                                                    <br />
                                                                                                </apex:repeat>
                                                                                            </div>
                                                                                        </apex:repeat>
                                                                                        <apex:repeat value="{!emailFolder4.emails}" var="email4">
                                                                                            &nbsp;-&nbsp;
                                                                                            <a href="#" onclick="javascript:selectEmailJS( '{!email4.id}', '{!email4.encName}','{!email4.encTitle}' );subscriberPreview.setEmailId('{!email4.id}');" status="sendButtonStatus"> 
                                                                                                {!email4.name} 
                                                                                            </a>
                                                                                            <br />
                                                                                        </apex:repeat>
                                                                                    </div>
                                                                                </apex:repeat>
                                                                                <apex:repeat value="{!emailFolder3.emails}" var="email3">
                                                                                    &nbsp;-&nbsp;
                                                                                    <a href="#" onclick="javascript:selectEmailJS( '{!email3.id}', '{!email3.encName}', '{!email3.encTitle}' );subscriberPreview.setEmailId('{!email3.id}');" status="sendButtonStatus"> {!email3.name} </a>
                                                                                    <br />
                                                                                </apex:repeat>
                                                                            </div>
                                                                        </apex:repeat>
                                                                        <apex:repeat value="{!emailFolder2.emails}" var="email2">
                                                                            &nbsp;-&nbsp;
                                                                            <a href="#" onclick="javascript:selectEmailJS( '{!email2.id}', '{!email2.encName}', '{!email2.encTitle}' );subscriberPreview.setEmailId('{!email2.id}');" status="sendButtonStatus"> 
                                                                                {!email2.name} 
                                                                            </a>
                                                                            <br />
                                                                        </apex:repeat>
                                                                    </div>
                                                                </apex:repeat>
                                                                <apex:repeat value="{!emailFolder1.emails}" var="email1">
                                                                    &nbsp;-&nbsp;
                                                                    <a href="#" onclick="javascript:selectEmailJS( '{!email1.id}', '{!email1.encName}','{!email1.encTitle}' );subscriberPreview.setEmailId('{!email1.id}');" status="sendButtonStatus"> 
                                                                        {!email1.name} 
                                                                    </a>
                                                                    <br />
                                                                </apex:repeat>
                                                            </div>
                                                        </apex:repeat>
                                                    </apex:pageBlock>
                                                </apex:outputPanel>
                                            </apex:facet>
                                        </apex:actionStatus>
                                    </apex:outputPanel>
                                </apex:outputPanel>
                            </apex:outputPanel>
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem id="emailsubject" helpText="{!$Label.msg0051}">
                            <apex:outputLabel value="{!$Label.subject}" />
                            <apex:inputText style="width:350px" value="{!localSend.email.title}" />
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!renderEmailPreview}">
                            <apex:outputLabel value="" />
                            <apex:outputpanel >
                                <table style="border: 0px">
                                    <tr>
                                        <td>
                                            <table style="border: 3px solid #f77f00; border-style: double solid solid double; padding: 0px;">
                                                <tr>
                                                    <td>
                                                        <img src="data:image/png;base64,{!previewImage}" />
                                                    </td>
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            <apex:commandLink action="{!closeEmailPreview}" rerender="sendEmailForm" status="previewEmailStatus">
                                                <img src="/img/search_dismiss.gif" />
                                            </apex:commandLink>
                                        </td>
                                    </tr>
                                </table>
                            </apex:outputpanel>
                        </apex:pageBlockSectionItem>
                    </apex:pageblocksection>
                    <apex:pageblocksection id="bottomBlock" columns="1">
                        <!-- From -->
                        <div />
                        <apex:pageBlockSectionitem id="selectedFrom" helptext="{!$Label.sndClasHlp}">
                            <apex:outputLabel for="fromBlock" value="{!$Label.from}" />
                            <apex:outputPanel id="fromBlock" layout="block">
                                <apex:outputPanel layout="block">
                                    <input type="radio" id="fromSelectorEmail" name="fromSelector" value="{!!localSend.SendClassOption}" onclick="swapFromSource();" status="sendButtonStatus" />
                                    <apex:outputLabel for="from" value="{!$Label.emailAddr}" />
                                    <br />
                                    <apex:outputPanel id="fromPicklist">
                                        <apex:selectList id="from" value="{!localSend.fromEmailSelected}" size="1">
                                            <apex:selectOptions value="{!localSend.fromOptions}" />
                                            <apex:actionSupport event="onclick" action="{!sendEnabler}" rerender="sendbutton" />
                                        </apex:selectList>
                                        <img style="vertical-align:middle;" height="18px" src="{!URLFOR( $Resource.ExactTargetImages, 'reqEmail.png' )}" />
                                    </apex:outputPanel>
                                </apex:outputPanel>
                                <apex:outputPanel id="sendClassificationWrapper" layout="block" rendered="true">
                                    <input type="radio" id="fromSelectorSC" name="fromSelector" value="{!localSend.SendClassOption}" onclick="swapFromSource();" status="sendButtonStatus" />
                                    <apex:outputLabel for="sendClassification" value="{!$Label.sendClass}" />
                                    <br />
                                    <apex:outputPanel id="scPicklist">
                                        <apex:selectList id="sendClassification" value="{!localSend.sendClassificationSelected}" size="1">
                                            <apex:selectOptions value="{!localSend.sendClassificationOptions}" />
                                            <apex:actionSupport event="onclick" action="{!sendEnabler}" rerender="sendbutton,optInSection" />
                                        </apex:selectList>
                                        <img style="vertical-align:middle;" height="18px" src="{!URLFOR( $Resource.ExactTargetImages, 'reqEmail.png' )}" />
                                    </apex:outputPanel>
                                </apex:outputPanel>
                            </apex:outputPanel>
                        </apex:pageBlockSectionitem>
                        <!-- Reply-to -->
                        <apex:pageBlockSectionitem rendered="{!renderReplyTo}" id="selectedReplyTo" helptext="{!$Label.msg0132}">
                            <apex:outputLabel value="{!$Label.reply_to}" />
                            <apex:selectList id="reply-to" value="{!localSend.replyToEmailSelected}" size="1">
                                <apex:selectOptions value="{!localSend.replyToOptions}" />
                            </apex:selectList>
                        </apex:pageBlockSectionitem>
                        <!-- Dedupe Subscribers -->
                        <apex:pageBlockSectionItem rendered="{!renderCampaign}" helpText="{!$Label.msg0006}">
                            <apex:outputLabel value="{!$Label.dedupeSubs}" />
                            <apex:inputCheckbox value="{!send.et4ae5__DedupeSubscribers__c}" />
                        </apex:pageBlockSectionItem>
                        <!-- Disable Individual Tracking -->
                        <apex:pageBlockSectionItem rendered="{!renderDIT}" helpText="{!$Label.msg0007}">
                            <apex:outputLabel value="{!$Label.disILT}" />
                            <apex:inputCheckbox value="{!send.et4ae5__Individual_Tracking_Disabled__c}" />
                        </apex:pageBlockSectionItem>
                        <!-- Scheduled Send Date/Time -->
                      <apex:pageBlockSectionItem id="sendDateTimeRadios" helpText="{!sendDateTimeHelpText}">
                        <apex:outputLabel for="dateBlock" value="{!$Label.sndDAndT}" />
                        <apex:outputPanel id="dateBlock" layout="block">
                          <apex:outputPanel layout="block">
                            <input type="radio" id="fromSelectorIm" name="immeSelector" onclick="swapDateSource();" status="sendButtonStatus" />
                            <apex:outputLabel for="imme" value="{!$Label.immedtly}" />
                          </apex:outputPanel>
                          <apex:outputPanel id="sendDateTimeWrapper" layout="block" rendered="true">
                            <input type="radio" id="fromSelectorDT" name="immeSelector" onclick="swapDateSource();" status="sendButtonStatus" />
                            <apex:outputLabel for="sendDateTime" value="{!$Label.schedFutSd}" />
                            <br />
                            <apex:outputPanel id="schCalendar">
                              <apex:inputField id="sendDateTime" value="{!send.et4ae5__Scheduled_Date_Time__c}" />
                              <img style="vertical-align:middle;" height="18px" src="{!URLFOR( $Resource.ExactTargetImages, 'reqEmail.png' )}" />
                            </apex:outputPanel>
                          </apex:outputPanel>
                        </apex:outputPanel>
                        </apex:pageBlockSectionitem>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection id="optInSection">
                        <!-- Opt in -->
                        <apex:pageBlockSectionItem helpText="{!$Label.msg0058}" rendered="{!requiresOptIn}">
                            <apex:outputLabel value="{!IF((renderCampaign),$Label.optInCrtfy,$Label.optInSingle)}" />
                            <apex:inputCheckbox value="{!optIn}">
                                <apex:actionSupport event="onclick" action="{!sendEnabler}" rerender="sendbutton" />
                            </apex:inputCheckbox>
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection id="sendbutton">
                        <!-- Send Button -->
                        <apex:pageBlockSectionItem rendered="{!isOptIn}">
                            <apex:outputLabel value="" />
                            <apex:commandButton value="{!$Label.send}" onclick="return submitSend();" ondblclick="return submitSend();" action="{!sendWasPressed}" style="background:#ffa100;color:white" />
                        </apex:pageBlockSectionItem>
                        <apex:pageBlockSectionItem rendered="{!NOT( isOptIn )}">
                            <apex:outputLabel value="" />
                            <apex:commandButton value="{!$Label.send}" disabled="true" />
                        </apex:pageBlockSectionItem>
                    </apex:pageBlockSection>
                </apex:pageBlock>
            </apex:facet>
        </apex:actionStatus>
        <apex:composition template="et4ae5__etFooter" />
    </apex:form>
    <apex:includeScript value="{!URLFOR($Resource.et4ae5__jQueryUI, 'jquery-ui-1.9.2.custom/js/jquery-1.8.3.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.et4ae5__bootstrap, 'dist/js/bootstrap.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.et4ae5__bootstrap, 'dist/js/bootstrap.min.js')}" />
    <script type="text/javascript">
        var j$ = jQuery.noConflict();
         // Identify triggerable elements.
        var fsEmail = jQuery('[id$=fromSelectorEmail]');
        var fsSC = jQuery('[id$=fromSelectorSC]');
        var fsImme = jQuery('[id$=fromSelectorIm]');
        var fsDaTi = jQuery('[id$=fromSelectorDT]');

         // Assign event actions.
        fsEmail.onclick = swapFromSource;
        fsSC.onclick = swapFromSource;
        fsImme.onclick = swapDateSource;
        fsDaTi.onclick = swapDateSource;

        var sendBtnEnabled = true;

        function submitSend()
        {
            if (sendBtnEnabled)
            {
                sendBtnEnabled = false;
                return true;
            }
            return false;
        }

         // Initial swap execution.
        swapFromSource();
        swapDateSource();

         // Swap enablement for the picklists.
        function swapFromSource()
        {
            j$ = jQuery.noConflict();
            fsEmail = jQuery('[id$=fromSelectorEmail]');
            fsSC = jQuery('[id$=fromSelectorSC]');
            // Identify picklists.
            var fromList = jQuery('[id$=from]');
            var scList = jQuery('[id$=sendClassification]');
            var fromOP = jQuery('[id$=fromPicklist]');
            var scOP = jQuery('[id$=scPicklist]');

            // Disable both picklists.
            if (fromList != null) fromList.attr("disabled", true);
            if (scList != null) scList.attr("disabled", true);
            fromOP.hide();
            scOP.hide();

            if (jQuery('[id$=fromSelectorEmail]').is(':checked') == true || (jQuery('[id$=theHiddenInput1]').val() == "true" && jQuery('[id$=fromSelectorSC]').is(':checked') == false))
                fsEmail.attr("checked", "checked");
            if (jQuery('[id$=fromSelectorSC]').is(':checked') == true || (jQuery('[id$=theHiddenInput2]').val() == "true" && jQuery('[id$=fromSelectorEmail]').is(':checked') == false))
                fsSC.attr("checked", "checked");
            if (fsEmail.is(":checked") == false && fsSC.is(":checked") == false)
                fsEmail.attr("checked", "checked");

            // Enable the correct picklist.
            if (fsEmail.is(":checked") == true)
            {
                if (scList != null) scList.val("");
                if (fromList != null) fromList.removeAttr("disabled");
                fromOP.show();
            }
            if (fsSC.is(":checked") == true)
            {
                if (fromList != null) fromList.val("");
                if (scList != null) scList.removeAttr("disabled");
                scOP.show();
            }
        }


        function swapDateSource()
        {
            j$ = jQuery.noConflict();
            fsImme = jQuery('[id$=fromSelectorIm]');
            fsDaTi = jQuery('[id$=fromSelectorDT]');
            // Identify picklists.
            var SDT = jQuery('[id$=schCalendar]');
            var calChoice = jQuery('[id$=sendDateTime]');

            // Disable both picklists.
            SDT.hide();

            if (jQuery('[id$=fromSelectorDT]').is(':checked') == true)
                fsDaTi.attr("checked", "checked");
            if (jQuery('[id$=fromSelectorDT]').is(':checked') == false && jQuery('[id$=fromSelectorIm]').is(':checked') == false)
            {
                fsImme.attr("checked", "checked");
            }
            if (fsDaTi.is(":checked") == true)
            {
                SDT.show();
                isSSon();
            }
            else
            {
                calChoice.val(null);
                isSSoff();
            }

            checkSendEmailReadiness();
            //alert('fromList.disabled: ' + fromList.attr);
            //alert('scList.disabled: ' + scList.attr);
        }

        function changeTargetAudience()
        {
            changeTargetAudienceJS(jQuery('[id$=fromSelectorEmail]').is(':checked'), jQuery('[id$=fromSelectorSC]').is(':checked'));
        }

        function changeBusinessUnit()
        {
            changeBusinessUnitJS(jQuery('[id$=fromSelectorEmail]').is(':checked'), jQuery('[id$=fromSelectorSC]').is(':checked'));
        }

        function showpopup()
        {
            fsEmail.attr("checked", "checked");
            fsImme.attr("checked", "checked");
            swapFromSource();
            swapDateSource();
            var scOP = jQuery('[id$=scPicklist]');
            scOP.hide();
            document.getElementById('opaque').style.display = 'block';
            var popUp = document.getElementById("popupcontent");
            popUp.style.display = "block";
        }

        function hidepopup()
        {
            fsEmail.attr("checked", "checked");
            fsImme.attr("checked", "checked");
            swapFromSource();
            swapDateSource();
            var scOP = jQuery('[id$=scPicklist]');
            scOP.hide();
            var popUp = document.getElementById("popupcontent");
            popUp.style.display = "none";
            document.getElementById('opaque').style.display = 'none';
        }
        
        function uriDecodeSubject(subject)
	    {
	   	subject = subject.replace(/\+/g,' ');
	   	subject = decodeURIComponent(subject);
	   	subject = subject.replace(/&#39;/g, "\'");
	   	subject = subject.replace(/&(quot);/g, "\"");
	   	subject = subject.replace(/&(gt);/g, "\>");
	   	subject = subject.replace(/&(lt);/g, "\<");
	   	subject = subject.replace(/&(amp);/g, "\&");
	  	subject = jQuery('<textarea />').html(subject).text();
	   	return subject;
	    }
    </script>
    <apex:stylesheet value="https://{!urlRoot}.exacttarget.com/FuelUX/css/fuel-all.css" />
    <apex:stylesheet value="https://{!urlRoot}.exacttarget.com/FuelUX/css/ie8.css" />
    <apex:stylesheet value="https://{!urlRoot}.exacttarget.com/xpresscore/css/styles.css" />
    <div class="wrap" id="xpressDialogContent" style="position: relative; display: none;">
        <div class="modal-content" style="padding-bottom: 0px;">
            <div id="previewSendControl">
                <div id="subscriberPreviewLoader"></div>
                <div id="subscriberPreviewContainer" style="visibility: hidden;">
                    <div id="subscriberPreviewNotification" style="height: 39px;"></div>
                    <div id="selectSubscriberRegion">
                        <div class="subscriber-preview-section" id="selectSubscriber">
                            <table class="subscriber-selection-container">
                                <tr id="subscriber-selection-container-row">
                                    <th><span class="fuel-label">{!$label.msg0023}</span>&nbsp;</th>
                                    <td>
                                        <button id="prevBtn" class="fuel-button-small">&lt;</button>
                                    </td>
                                    <td>
                                        <div id="subScroller"></div>
                                        <div id="subScrollerResults" style="overflow-y: scroll; overflow-x: hidden; z-index: 100; background-color: #fff; position: absolute; width: 298px; height: 150px; border: 1px solid black; display: none;">
                                        </div>
                                    </td>
                                    <td>
                                        <button id="nextBtn" class="fuel-button-small">&gt;</button>
                                    </td>
                                </tr>
                            </table>
                            <div id="emailTypeSelector"></div>
                        </div>
                        <div class="subscriber-preview-section fuel-editor-canvas-layout modal-wrap" style="margin: 5px auto; text-align: center;" id="subscriberPreviewImageContainer">
                            <div id="previewIframeContainer">
                                <iframe id="previewHTMLIframe" frameborder="0" style="overflow-y: auto; height: 350px; width: 920px;">
                                </iframe>
                            </div>
                        </div>
                        <div class="subscriber-preview-section fuel-block" id="subscriberPreviewTextTrayContainer"><span id="subscriberPreviewTestEmails" class="fuel-label">{!$label.sndTstEmTo}</span>
                            <div class="subscriber-preview-text-tray" id="subscriberPreviewTextTray">
                                <div id="subscriberPreviewEmails" style="width: 98%; margin: inherited inherited 10px inherited;"></div>
                                <button type="button" style="display: block; margin: 0px;" id="testSend" class="fuel-button-primary">{!$label.testSend}</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" src="https://app.s1.qa1.exacttarget.com/FuelUX/js/fuel-loader.js"></script>
    <script type="text/javascript" src="../../soap/ajax/27.0/connection.js"></script>
    <script type="text/javascript">
        var base64 = {};
        base64.PADCHAR = '=';
        base64.ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

        base64.makeDOMException = function ()
        {
            // sadly in FF,Safari,Chrome you can't make a DOMException
            var e, tmp;

            try
            {
                return new DOMException(DOMException.INVALID_CHARACTER_ERR);
            }
            catch (tmp)
            {
                // not available, just passback a duck-typed equiv
                // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Error
                // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Error/prototype
                var ex = new Error("DOM Exception 5");

                // ex.number and ex.description is IE-specific.
                ex.code = ex.number = 5;
                ex.name = ex.description = "INVALID_CHARACTER_ERR";

                // Safari/Chrome output format
                ex.toString = function ()
                {
                    return 'Error: ' + ex.name + ': ' + ex.message;
                };
                return ex;
            }
        }

        base64.getbyte64 = function (s, i)
        {
            // This is oddly fast, except on Chrome/V8.
            //  Minimal or no improvement in performance by using a
            //   object with properties mapping chars to value (eg. 'A': 0)
            var idx = base64.ALPHA.indexOf(s.charAt(i));
            if (idx === -1)
            {
                throw base64.makeDOMException();
            }
            return idx;
        }

        base64.decode = function (s)
        {
            // convert to string
            s = '' + s;
            var getbyte64 = base64.getbyte64;
            var pads, i, b10;
            var imax = s.length
            if (imax === 0)
            {
                return s;
            }

            if (imax % 4 !== 0)
            {
                throw base64.makeDOMException();
            }

            pads = 0
            if (s.charAt(imax - 1) === base64.PADCHAR)
            {
                pads = 1;
                if (s.charAt(imax - 2) === base64.PADCHAR)
                {
                    pads = 2;
                }
                // either way, we want to ignore this last block
                imax -= 4;
            }

            var x = [];
            for (i = 0; i < imax; i += 4)
            {
                b10 = (getbyte64(s, i) << 18) | (getbyte64(s, i + 1) << 12) |
                    (getbyte64(s, i + 2) << 6) | getbyte64(s, i + 3);
                x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 0xff, b10 & 0xff));
            }

            switch (pads)
            {
            case 1:
                b10 = (getbyte64(s, i) << 18) | (getbyte64(s, i + 1) << 12) | (getbyte64(s, i + 2) << 6);
                x.push(String.fromCharCode(b10 >> 16, (b10 >> 8) & 0xff));
                break;
            case 2:
                b10 = (getbyte64(s, i) << 18) | (getbyte64(s, i + 1) << 12);
                x.push(String.fromCharCode(b10 >> 16));
                break;
            }
            return x.join('');
        }

        base64.getbyte = function (s, i)
        {
            var x = s.charCodeAt(i);
            if (x > 255)
            {
                throw base64.makeDOMException();
            }
            return x;
        }

        base64.encode = function (s)
        {
            if (arguments.length !== 1)
            {
                throw new SyntaxError("Not enough arguments");
            }
            var padchar = base64.PADCHAR;
            var alpha = base64.ALPHA;
            var getbyte = base64.getbyte;

            var i, b10;
            var x = [];

            // convert to string
            s = '' + s;

            var imax = s.length - s.length % 3;

            if (s.length === 0)
            {
                return s;
            }
            for (i = 0; i < imax; i += 3)
            {
                b10 = (getbyte(s, i) << 16) | (getbyte(s, i + 1) << 8) | getbyte(s, i + 2);
                x.push(alpha.charAt(b10 >> 18));
                x.push(alpha.charAt((b10 >> 12) & 0x3F));
                x.push(alpha.charAt((b10 >> 6) & 0x3f));
                x.push(alpha.charAt(b10 & 0x3f));
            }
            switch (s.length - imax)
            {
            case 1:
                b10 = getbyte(s, i) << 16;
                x.push(alpha.charAt(b10 >> 18) + alpha.charAt((b10 >> 12) & 0x3F) +
                    padchar + padchar);
                break;
            case 2:
                b10 = (getbyte(s, i) << 16) | (getbyte(s, i + 1) << 8);
                x.push(alpha.charAt(b10 >> 18) + alpha.charAt((b10 >> 12) & 0x3F) +
                    alpha.charAt((b10 >> 6) & 0x3f) + padchar);
                break;
            }
            return x.join('');
        }

        require([
                'fuel-jquery',
                'fuel-controls',
                'button'
            ],

            function ()
            {
                subscribers = (function ()
                {
                    var subs = [],
                        curIdx = 0,
                        curSub = {},
                        cacheHistory = [],

                        add = function (sub)
                        {
                            subs.push(sub);
                        },

                        clear = function ()
                        {
                            curSub = null;
                            curIdx = 0;
                            subs = [];
                        },

                        clearPreviewCache = function ()
                        {
                            for (var i = 0; i < subs.length; i++)
                            {
                                subs[i].htmlBody = null;
                                subs[i].textBody = null;
                            }
                        },

                        current = function ()
                        {
                            return curSub;
                        },

                        currentIndex = function ()
                        {
                            return curIdx;
                        },

                        getCount = function ()
                        {
                            return subs.length || 0;
                        },

                        next = function ()
                        {
                            if (subs.length != 1)
                            {
                                if (subs.length - 1 != curIdx)
                                {
                                    curIdx++;
                                }
                                else
                                {
                                    curIdx = 0;
                                }

                                select();

                                return curSub;
                            }
                        },

                        maintainCache = function ()
                        {
                            if (curSub !== undefined)
                            {
                                var existingIdx = cacheHistory.indexOf(curIdx);
                                if (existingIdx != -1)
                                {
                                    // Remove the index if it already exists
                                    cacheHistory.splice(existingIdx, 1);
                                }
                                cacheHistory.push(curIdx);
                            }

                            if (cacheHistory.length > 10)
                            {
                                // Clear the first array entry - it's the oldest
                                var idx = cacheHistory.shift();
                                subs[idx].htmlBody = null;
                                subs[idx].textBody = null;
                            }
                        },

                        previous = function ()
                        {
                            if (subs.length != 1)
                            {
                                if (curIdx != 0)
                                {
                                    curIdx--;
                                }
                                else
                                {
                                    curIdx = subs.length - 1;
                                }

                                select();

                                return curSub;
                            }
                        },

                        select = function (idx)
                        {
                            if (idx !== undefined)
                            {
                                curIdx = idx;
                            }

                            curSub = subs[curIdx];
                            maintainCache();
                        };

                    // Expose public methods
                    return {
                        add: add,
                        clearPreviewCache: clearPreviewCache,
                        clear: clear,
                        current: current,
                        currentIndex: currentIndex,
                        getCount: getCount,
                        next: next,
                        previous: previous,
                        select: select
                    };
                }());

                subscriberPreview = (function ()
                {
                    // Defined by the environment's App Center app
                    // PROD
                    var appId = '4ecb7b93-1ded-4319-8e9d-991ca63025ae',

                        // Enum
                        PreviewStates = {
                            INIT: 0,
                            SYNC: 1,
                            CHECK_SYNC: 2,
                            RETRIEVE: 3,
                            SELECT: 4
                        },

                        // Locals
                        // Variables prefixed with 'd' are decoded
                        // Variables prefixed with 'e' are encoded
                        dDeGuid = '',
                        eDeGuid = '',
                        eSyncSubId = '',
                        emailId = 0,
                        isInitialPreview = true,
                        integrationVersion = '5.0',
                        maxSubs = 250,
                        objectId = '{!dspObjectId}',
                        objectType = '{!dspObjectType}',
                        sfNamespace = 'et4ae5',
                        state = PreviewStates.INIT,
                        stopWorking = false,
                        legacyToken = '{!dspLegacyToken}',
                        accessToken = '{!dspAccessToken}',

                        // Controls
                        btnNext = {},
                        btnPrev = {},
                        btnTestSend = {},
                        control = {},
                        emailTypeSelector = {},
                        iframe = {},
                        notifier = {},
                        previewLoadingIcon = {},
                        subSelector = {},

                        allParamsValid = function ()
                        {
                            var invalidParam = '';
                            var detailedMsg = '';
                            if (emailId === undefined || emailId <= 0)
                            {
                                invalidParam = '{!$label.emailId}';
                            }
                            else if (objectId === undefined || objectId.length === 0)
                            {
                                invalidParam = '{!$label.objId}';
                            }
                            else if (objectType === undefined || objectType.length === 0 || $.inArray(objectType, ['contact', 'lead', 'campaign', 'report']) === -1)
                            {
                                invalidParam = '{!$label.objType}';
                                detailedMsg = '{!$label.msg0043}';
                            }
                            else if (legacyToken === undefined || legacyToken.length === 0 || accessToken === undefined || accessToken.length === 0)
                            {
                                invalidParam = '{!$label.authTokens}';
                            }

                            if (invalidParam.length > 0)
                            {
                                showErrorMessage('{!$label.invalid} ' + invalidParam + ' {!$label.provided}. ' + detailedMsg);
                                return false;
                            }

                            return true;
                        },

                        checkSyncSubscribers = function ()
                        {
                            state = PreviewStates.CHECK_SYNC;
                            // Requires encoded sync subscriber id
                            Fuel.ajax(
                            {
                                url: Fuel.endpoints.Rest + 'beta/integration/subscriber/synchronization/' + eSyncSubId,
                                dataType: "json",
                                contentType: "application/json",
                                type: "GET",
                                cache: false,
                                success: function (response)
                                {
                                    if (!stopWorking)
                                    {
                                        if (response.syncStatus.toLowerCase() === 'errored')
                                        {
                                            showErrorMessage('{!$label.msg0069}');
                                        }
                                        else if (response.syncStatus.toLowerCase() !== 'completed')
                                        {
                                            setTimeout(function ()
                                            {
                                                checkSyncSubscribers();
                                            }, 5000);
                                        }
                                        else
                                        {
                                            eDeGuid = response.customObject.objectId;
                                            dDeGuid = decodeGuid(eDeGuid);
                                            retrieveSubscribers();
                                        }
                                    }
                                },
                                error: function ()
                                {
                                    showErrorMessage('{!$label.msg0069}');
                                    toggleSyncLoadingIcon('hide');
                                }
                            });
                        },

                        clearPreview = function ()
                        {
                            iframe.contents().find('body').html('');
                        },

                        closeDialog = function ()
                        {
                            // Reinitialize some of the dialog controls
                            stopWorking = true;
                            clearPreview();
                            subscribers.select(0);
                        },

                        decodeGuid = function (guid)
                        {
                            // Decodes a REST encoded GUID
                            var result = base64.decode(guid);
                            var parts = result.split(':');
                            var value = parts[0] + '==';
                            value = value.replace(/_/g, '/').replace(/-/g, '+');
                            result = base64.decode(value);

                            var data = result.split("");
                            var copy = data.slice(0);
                            data[0] = copy[3];
                            data[1] = copy[2];
                            data[2] = copy[1];
                            data[3] = copy[0];
                            data[4] = copy[5];
                            data[5] = copy[4];
                            data[6] = copy[7];
                            data[7] = copy[6];

                            var guid = [];
                            for (var i = 0; i < data.length; i++)
                            {
                                if (i == 4 || i == 6 || i == 8 || i == 10) guid.push("-");
                                var b = data[i].charCodeAt(0).toString(16);
                                if (b.length == 1) b = "0" + b;
                                guid.push(b);
                            }
                            return guid.join("");
                        },

                        determineEmailType = function (htmlBody, textBody, selectedItem)
                        {
                            if (htmlBody.search('</body>') === -1)
                            {
                                emailTypeSelector.fuelButtonSet('selectButton', 'Text');
                                emailTypeSelector.fuelButtonSet('setDisabled');
                                selectedItem.value = 'text';

                                showInfoMessage('{!$label.note}:', ' {!$label.msg0024}');
                            }
                            else
                            {
                                showInfoMessage('{!$label.note}:', ' {!$label.msg0045}');
                            }
                        },

                        emailTypeSelected = function (evt, item)
                        {
                            clearPreview();
                            var curSub = subscribers.current();

                            if (item.value === 'html')
                            {
                                if (curSub.htmlBody === undefined)
                                {
                                    // This should only happen if an error occurred; attempt a getPreview again
                                    selectSubscriber();
                                }
                                else
                                {
                                    iframe.contents().find('body').html(subscribers.current().htmlBody);
                                }
                            }
                            else if (item.value === 'text')
                            {
                                if (curSub.textBody === undefined)
                                {
                                    // This should only happen if an error occurred; attempt a getPreview again
                                    selectSubscriber();
                                }
                                else
                                {
                                    iframe.contents().find('body').html('<pre>' + subscribers.current().textBody + '</pre>');
                                }
                            }
                        },

                        getPreview = function (options)
                        {
                            // Get preview
                            Fuel.ajax($.extend(
                            {
                                url: Fuel.endpoints.FuelAPI + 'guide/v1/emails/' + emailId + '/dataExtension/' + dDeGuid + '/contacts/key:' + subscribers.current().subscriberKey + '/preview',
                                dataType: "json",
                                type: "POST",
                                cache: false,
                                useFuel2Token: true
                            }, options));
                        },

                        hideMessage = function (el)
                        {
                            var element = el || notifier;
                            element.fuelNotification('hide');
                            // Need to destroy the msg to make it go away
                            element.fuelNotification('destroy');
                        },

                        hideResults = function (e)
                        {
                            var qry = $(e.target);
                            if (!qry.closest('#subScroller').length && !qry.closest('#subScrollerResults').length)
                            {
                                $('#subScrollerResults').hide();
                            }
                        },

                        init = function ()
                        {
                            // Do one-time initialization here
                            control = $('#previewSendControl');
                            notifier = $('#subscriberPreviewNotification');
                            iframe = $('#previewHTMLIframe');
                            emailTypeSelector = $('#emailTypeSelector');
                            previewLoadingIcon = $('#subscriberPreviewImageContainer');
                            subSelector = $('#subScroller');
                            btnTestSend = $('#testSend');
                            btnPrev = $('#prevBtn');
                            btnNext = $('#nextBtn');

                            control.click(hideResults);
                            btnTestSend.click(sendTestEmail);
                            btnPrev.click(previousSubscriber);
                            btnNext.click(nextSubscriber);

                            render();
                            initFuel();
                        },

                        initEmailTypeSelector = function ()
                        {
                            emailTypeSelector.fuelButtonSet('destroy');
                            var emailTypeButtons = [
                            {
                                "name": "HTML",
                                "value": "html",
                                "selected": true
                            },
                            {
                                "name": "Text",
                                "value": "text"
                            }];
                            emailTypeSelector.fuelButtonSet(
                            {
                                items: emailTypeButtons,
                                onitemselected: emailTypeSelected
                            });
                            emailTypeSelector.fuelButtonSet('removeDisabled');
                        },

                        initFuel = function ()
                        {
                            // Retrieve the URL to use based on SF Config
                            sforce.connection.sessionId = '{!GETSESSIONID()}';
                            var restFieldName = sfNamespace + '__Root_Rest_API_URL__c';
                            var configObjName = sfNamespace + '__Configuration__c';
                            var config = sforce.connection.query('SELECT ' + restFieldName + ' FROM ' + configObjName + ' LIMIT 1');
                            var url = config.records[restFieldName];

                            url = url[url.length - 1] != '/' ? url + '/' : url;
                            var baseUrl = url.replace('rest', '{!urlRoot}');
                            var fuelApi = 'https://www.exacttargetapis.com/';
                            var fuelAuthApi = 'https://auth.exacttargetapis.com/';
                            // TODO: Move the auth URL to the SF Config
                            if (baseUrl.indexOf('qa1') > 0)
                            {
                                fuelApi = 'https://qa.exacttargetapis.com/';
                                fuelAuthApi = 'https://auth-qa1s1.exacttargetapis.com/';
                            }
                            else if (baseUrl.indexOf('qa2') > 0)
                            {
                                fuelApi = 'https://qa.exacttargetapis.com/';
                                fuelAuthApi = 'https://auth-qa2s1.exacttargetapis.com/';
                            }

                            var endpoints = {
                                FuelUX: baseUrl + 'FuelUX/1.8/',
                                Platform: baseUrl,
                                Rest: baseUrl + 'rest/',
                                TokenRefresh: fuelAuthApi + 'v1/requestToken?legacy=1',
                                XpressCore: baseUrl + 'XpressCore/',
                                FuelAPI: fuelApi,
                                FuelAuthAPI: fuelAuthApi
                            };

                            Fuel.init(
                            {
                                appId: appId,
                                endpoints: endpoints,
                                TOKENS:
                                {
                                    legacyToken: legacyToken,
                                    accessToken: accessToken
                                }
                            });

                            // Override the Fuel OAuth refresh call
                            Fuel.oAuth.refresh = refreshOAuthToken;
                        },

                        nextSubscriber = function ()
                        {
                            if (subscribers.getCount() > 0)
                            {
                                subscribers.next();
                                selectSubscriber();
                            }
                        },

                        previousSubscriber = function ()
                        {
                            if (subscribers.getCount() > 0)
                            {
                                subscribers.previous();
                                selectSubscriber();
                            }
                        },

                        populateSubscribers = function (response)
                        {
                            try
                            {
                                var results = $('#subScrollerResults'),
                                    result;
                                for (i in response.entry)
                                {
                                    if (stopWorking)
                                        return;

                                    var subKeyField = $.grep(response.entry[i].customObjectData, function (e)
                                    {
                                        return e.name.toLowerCase() === "subscriberkey";
                                    });
                                    var emailField = $.grep(response.entry[i].customObjectData, function (e)
                                    {
                                        return e.name.toLowerCase() === "emailaddress";
                                    });

                                    if (subKeyField.length > 0)
                                    {
                                        response.entry[i].subscriberKey = subKeyField[0].value;
                                    }

                                    if (emailField.length > 0)
                                    {
                                        response.entry[i].emailAddress = emailField[0].value;
                                    }

                                    subscribers.add(response.entry[i]);
                                    result = $('<div id="' + i + '"></div>').html(response.entry[i].emailAddress);
                                    result.click(function ()
                                    {
                                        var selectedId = parseInt(this.id);
                                        if (subscribers.currentIndex() != selectedId)
                                        {
                                            subscribers.select(selectedId);
                                            selectSubscriber();
                                        }
                                        results.hide();
                                    });

                                    result.mouseover(function ()
                                    {
                                        $(this).css("background-color", "#98C9F4");
                                    });

                                    result.mouseout(function ()
                                    {
                                        $(this).css("background-color", "#FFFFFF");
                                    });

                                    results.append(result);
                                }

                                toggleSyncLoadingIcon('hide');

                                if (subscribers.getCount() > 0)
                                {
                                    subscribers.select(0);
                                    selectSubscriber();
                                }
                                else
                                {
                                    results.append($('<div>{!$label.noDataFnd}</div>')).show();
                                    emailTypeSelector.fuelButtonSet('setDisabled');
                                    showInfoMessage('{!$label.msg0029}', ' {!$label.msg0041}');
                                    toggleSyncLoadingIcon('hide');
                                }
                            }
                            catch (e)
                            {
                                showErrorMessage('{!$label.msg0066} - ' + e.message);
                                toggleSyncLoadingIcon('hide');
                            }
                        },

                        refreshOAuthToken = function (callback)
                        {
                            // In order to do this securely, need to implement refresh token on server side
                            showErrorMessage('{!$label.prevExpd}');
                        }

                    render = function ()
                    {
                        // One time control inits & CSS tweaks needed to make the page look right. 
                        subSelector.fuelInput(
                        {
                            label: '',
                            placeholder: 'email address',
                            width: 300
                        }).click(showResults);
                        subSelector.find('input').css('width', '270px');
                        $('div .fuel-input-wrap').css('margin-bottom', '0px')
                        $('#subscriberPreviewEmails').fuelInput(
                        {
                            label: '',
                            placeholder: 'email address',
                            width: 600
                        });
                        // Remove the max length, then limit the number of recipients of we wish in sendTestEmail
                        $('#subscriberPreviewEmails').find('input').removeAttr('maxlength')

                        initEmailTypeSelector();

                        $('#subscriberPreviewTextTrayContainer').css('visibility', 'inherit');
                    },

                    retrieveSubscribers = function ()
                    {
                        state = PreviewStates.RETRIEVE;
                        if (stopWorking)
                            return;

                        // Requires an encoded data extension id
                        Fuel.ajax(
                        {
                            url: Fuel.endpoints.Rest + 'beta/object/' + eDeGuid + '/data/?$sort=subscriberKey&$top=' + maxSubs,
                            dataType: "json",
                            type: "GET",
                            cache: false,
                            success: function (response, textStatus, xhr)
                            {
                                populateSubscribers(response);
                            },
                            error: function (data)
                            {
                                showErrorMessage('{!$label.msg0067}');
                                toggleSyncLoadingIcon('hide');
                            }
                        });
                    },

                    selectSubscriber = function ()
                    {
                        state = PreviewStates.SELECT;
                        try
                        {
                            togglePreviewLoadingIcon('show');
                            var curSub = subscribers.current();

                            subSelector.fuelInput('setValue', curSub.emailAddress);

                            var selectedItems = emailTypeSelector.fuelButtonSet('getSelectedItems')
                            var selectedItem = selectedItems.length > 0 ? selectedItems[0] : '';
                            // If we have cache for the current sub, use it.
                            if (selectedItem.value === 'html' && curSub.htmlBody)
                            {
                                iframe.contents().find('body').html(curSub.htmlBody);
                                togglePreviewLoadingIcon('hide');
                            }
                            else if (selectedItem.value === 'text' && curSub.textBody)
                            {
                                iframe.contents().find('body').html('<pre>' + curSub.textBody + '</pre>');
                                togglePreviewLoadingIcon('hide');
                            }
                            else
                            {
                                // No cache, get the preview
                                getPreview(
                                {
                                    error: function (data)
                                    {
                                        showErrorMessage('{!$label.msg0068}');
                                        clearPreview();
                                        // Do this so the info message will re-pop since an error message should be shown
                                        isInitialPreview = true;
                                        togglePreviewLoadingIcon('hide');
                                    },
                                    success: function (data)
                                    {
                                        var htmlView = $.grep(data.message.views, function (e)
                                        {
                                            return e.contentType.toLowerCase() === 'vnd.exacttarget.message.email.htmlbody';
                                        });
                                        var textView = $.grep(data.message.views, function (e)
                                        {
                                            return e.contentType.toLowerCase() === 'vnd.exacttarget.message.email.textbody';
                                        });

                                        var htmlBody = '';
                                        if (htmlView.length > 0)
                                        {
                                            htmlBody = htmlView[0].content;
                                        }

                                        var textBody = '';
                                        if (textView.length > 0)
                                        {
                                            textBody = textView[0].content;
                                        }

                                        curSub.htmlBody = htmlBody;
                                        curSub.textBody = textBody;

                                        if (isInitialPreview)
                                        {
                                            // Sets the email type selector state & info message
                                            determineEmailType(htmlBody, textBody, selectedItem);
                                            isInitialPreview = false;
                                        }

                                        if (selectedItem.value === 'html')
                                        {
                                            iframe.contents().find('body').html(htmlBody);
                                        }
                                        else if (selectedItem.value === 'text')
                                        {
                                            iframe.contents().find('body').html('<pre>' + textBody + '</pre>');
                                        }

                                        togglePreviewLoadingIcon('hide');
                                    }
                                });
                            }
                        }
                        catch (e)
                        {
                            showErrorMessage('{!$label.msg0070} - ' + e.message);
                            toggleSyncLoadingIcon('hide');
                        }
                    },

                    sendTestEmail = function ()
                    {
                        // Remove whitespace and replace commas with semi-colons for delimiter
                        var testSendEmails = $('#subscriberPreviewEmails').find('input').val().replace(/\s+/g, '').replace(/,/g, ';').split(';');
                        if (testSendEmails.length > 0 && testSendEmails[0].toLowerCase() != 'email address')
                        {
                            var sendJson = {
                                "emailID": emailId,
                                "fromName": testSendEmails[0],
                                "fromEmail": testSendEmails[0],
                                "dataSource":
                                {
                                    "contact": "key:" + subscribers.current().subscriberKey,
                                    "type": "DataExtension",
                                    "id": dDeGuid
                                },
                                "recipients": testSendEmails
                            };

                            Fuel.ajax(
                            {
                                url: Fuel.endpoints.FuelAPI + 'guide/v1/emails/preview/send',
                                dataType: "json",
                                contentType: "application/json",
                                type: "POST",
                                cache: false,
                                useFuel2Token: true,
                                data: JSON.stringify(sendJson),
                                success: function (response, textStatus, xhr)
                                {
                                    showSuccessMessage('{!$label.testEmSent}', ' {!$label.emSentTo} ' + testSendEmails.join(', ').replace(/, (?=[^,]*$)/, ' & ') + '.');
                                },
                                error: function (xhr, status, error)
                                {
                                    showErrorMessage('{!$label.testSdFail}');
                                }
                            });
                        }
                        else
                        {
                            showErrorMessage('{!$label.msg0040}');
                        }
                    },

                    setObjectId = function (id)
                    {
                        objectId = id;
                        state = PreviewStates.SYNC;
                        subscribers.clear();
                        clearSubscribers();
                    },

                    setObjectType = function (type)
                    {
                        objectType = type;
                        state = PreviewStates.SYNC;
                        subscribers.clear();
                        clearSubscribers();
                    },

                    setEmailId = function (id)
                    {
                        emailId = id;
                        subscribers.clearPreviewCache();
                        initEmailTypeSelector();

                        isInitialPreview = true;
                        hideMessage();

                        // Add height back to the notification so it's considered in the dialog height when opened
                        $('#subscriberPreviewNotification').css('height', '39px');
                    },

                    showDialog = function ()
                    {
                        stopWorking = false;
                        if (allParamsValid())
                        {
                            // Determine the path to go down based on "state"
                            switch (state)
                            {
                            case PreviewStates.CHECK_SYNC:
                                checkSyncSubscribers();
                                break;

                            case PreviewStates.RETRIEVE:
                                retrieveSubscribers();
                                break;

                            case PreviewStates.SELECT:
                                selectSubscriber();
                                break;

                            default:
                                toggleSyncLoadingIcon('show');
                                syncSubscribers();
                                break;
                            }
                        }

                        $('#xpressDialogContent').fuelDialog(
                        {
                            title: "{!$label.sndPreview}- " + $('[id$=emailName]').text(),
                            width: 960,
                            footerButtonText: "{!$label.close}",
                            showFooterLink: false,
                            onbuttonclick: closeDialog,
                            onxclick: closeDialog
                        });

                        $('#xpressDialogContent').fuelDialog('open');
                    },

                    showErrorMessage = function (msg)
                    {
                        showMessage('error', '{!$label.error}: ', msg);
                    },

                    showInfoMessage = function (boldMsgPortion, msg, el)
                    {
                        showMessage('informative', boldMsgPortion, msg, el);
                    },

                    showMessage = function (type, boldMsgPortion, msg, el)
                    {
                        var element = el || notifier;
                        // Remove the div height when msg is hidden
                        element.fuelNotification(
                        {
                            onhide: function ()
                            {
                                $('#subscriberPreviewNotification').css('height', '0px');
                            }
                        });

                        $('#subscriberPreviewNotification').css('height', '39px');
                        element.fuelNotification('show', type, boldMsgPortion, msg);
                    },

                    showResults = function ()
                    {
                        if ($('#subScrollerResults div').length)
                        {
                            $('#subScrollerResults').show();
                        }
                    },

                    showSuccessMessage = function (boldMsgPortion, msg, el)
                    {
                        showMessage('information', boldMsgPortion, msg, el);
                    },

                    syncSubscribers = function ()
                    {
                        state = PreviewStates.SYNC;
                        var syncRequest = '';
                        if (objectType === 'campaign')
                        {
                            syncRequest = {
                                "isOneTime": true,
                                "source":
                                {
                                    "salesForce":
                                    {
                                        "version": integrationVersion,
                                        "sourceList":
                                        {
                                            "campaigns": [
                                            {
                                                "campaignId": objectId
                                            }]
                                        },
                                        "properties": [
                                        {
                                            "name": "SubscriberRetentionPeriod",
                                            "value": "1"
                                        },
                                        {
                                            "name": "ThresholdCount",
                                            "value": maxSubs.toString()
                                        }]
                                    }
                                }
                            };
                        }
                        else if (objectType === 'report')
                        {
                            syncRequest = {
                                "isOneTime": true,
                                "source":
                                {
                                    "salesForce":
                                    {
                                        "version": integrationVersion,
                                        "sourceList":
                                        {
                                            "reports": [
                                            {
                                                "reportId": objectId
                                            }]
                                        },
                                        "properties": [
                                        {
                                            "name": "SubscriberRetentionPeriod",
                                            "value": "1"
                                        },
                                        {
                                            "name": "ThresholdCount",
                                            "value": maxSubs.toString()
                                        }]
                                    }
                                }
                            };
                        }
                        else
                        {
                            syncRequest = {
                                "isOneTime": true,
                                "source":
                                {
                                    "salesForce":
                                    {
                                        "version": integrationVersion,
                                        "sourceList":
                                        {
                                            "single":
                                            {
                                                "objectType": objectType,
                                                "objectId": objectId
                                            }
                                        },
                                        "properties": [
                                        {
                                            "name": "SubscriberRetentionPeriod",
                                            "value": "1"
                                        },
                                        {
                                            "name": "ThresholdCount",
                                            "value": maxSubs.toString()
                                        }]
                                    }
                                }
                            };
                        }

                        if (stopWorking)
                            return;

                        Fuel.ajax(
                        {
                            url: Fuel.endpoints.Rest + 'beta/integration/subscriber/synchronization',
                            dataType: "json",
                            contentType: "application/json",
                            type: "POST",
                            cache: false,
                            data: JSON.stringify(syncRequest),
                            success: function (response)
                            {
                                eSyncSubId = response.id;
                                checkSyncSubscribers();
                            },
                            error: function (xhr, status, error)
                            {
                                showErrorMessage('{!$label.syncSbFail}');
                                toggleSyncLoadingIcon('hide');
                            }
                        });
                    },

                    togglePreviewLoadingIcon = function (state)
                    {
                        switch (state)
                        {
                        case "hide":
                            $('#previewIframeContainer').fuelLoadingIconOnly('destroy');
                            break;
                        case "show":
                            $('#previewIframeContainer').fuelLoadingIconOnly();
                            break;
                        }
                    },

                    toggleSyncLoadingIcon = function (state)
                    {
                        switch (state)
                        {
                        case "hide":
                            control.fuelLoader('destroy');
                            $('#subscriberPreviewContainer').css('visibility', 'visible');
                            break;
                        case "show":
                            $('#subscriberPreviewContainer').css('visibility', 'hidden');
                            control.fuelLoader(
                            {
                                annotated: "Sending data to ExactTarget..."
                            });
                            $('.fuel-loader-cell').css('vertical-align', 'middle');
                            $('.fuel-loader-node').css('width', '95px');
                            break;
                        }
                    };

                    // Expose public methods
                    return {
                        init: init,
                        showDialog: showDialog,
                        setEmailId: setEmailId
                    };
                }());

                subscriberPreview.init();
            });
    </script>
</apex:page>